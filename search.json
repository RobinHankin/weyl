[{"path":"https://robinhankin.github.io/weyl/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor covenant code of conduct","title":"Contributor covenant code of conduct","text":"members, contributors, leaders wish make participation community pleasant productive experience everyone. try act interact ways contribute open, welcoming, inclusive, healthy community. assume good faith, per WP:AGF. Examples behaviour contributes positive environment community include: Demonstrating empathy kindness toward people Communicating respectfully differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community","code":""},{"path":"https://robinhankin.github.io/weyl/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to weyl","title":"Contributing to weyl","text":"Thank considering contributing weyl! appreciate interest making project better. Please read adhere Code Conduct maintain safe, welcoming, inclusive environment. Various forms contributions welcome: Bug Reports: Feel free report bugs encounter. Documentation: Typos, clarity issues, missing guides: help welcome . Feature Discussions/Requests: Got idea? Open issue discuss potential. Code Contributions: code contributions welcome. Tests checks run CI, however locally one can use: devtools::test(). Ideally change documented. Major changes vignettes.","code":""},{"path":"https://robinhankin.github.io/weyl/articles/weyl.html","id":"the-package-in-use","dir":"Articles","previous_headings":"","what":"The package in use","title":"Quantum algebra with R: the weyl package","text":"package includes functionality automate calculations. particular, package idiom represents generating elements ∂\\partial xx first Weyl algebra R objects d x respectively. may manipulated standard arithmetic operations: , result input given standard form. see terms, one per row, coefficients rightmost column (viz 7,12,47,12,4). Thus first row 7∂7\\partial, second 12x∂212x\\partial^2, third 4x2∂34x^2\\partial^3. may choose display result symbolic form rather matrix form: arguably natural representation. package allows one use R semantics. example, consider d1=∂x+2∂3d_1=\\partial x + 2\\partial^3 d2=3+7∂−5x2∂2d_2=3+7\\partial -5x^2\\partial^2. Observing d1d_1 d2d_2 standard form, package idiom create operators : (object d1 converted standard form automatically). Observe , like spray package, order terms defined. may apply usual rules arithmetic objects: Standard R semantics operate, possible work complicated expressions:","code":"library(weyl) 7*d + 4*x*d^3*x ## A member of the Weyl algebra: ##  x d     val ##  0 1  =    7 ##  1 2  =   12 ##  2 3  =    4 options(polyform=TRUE) 7*d + 4*x*d^3*x ## A member of the Weyl algebra: ## +7*d +12*x*d^2 +4*x^2*d^3 (d1 <- d*x + 2*d^3) ## A member of the Weyl algebra: ## 1 +x*d +2*d^3 (d2 <- 3 + 7*d  -5*x^2*d^2) ## A member of the Weyl algebra: ## 3 +7*d -5*x^2*d^2 d1*d2 ## A member of the Weyl algebra: ## 3 +7*x*d^2 +3*x*d -15*x^2*d^2 -60*x*d^4 -5*x^3*d^3 +7*d +14*d^4 -54*d^3 ## -10*x^2*d^5 options(polyform=TRUE) (d1^2 + d2) * (d2 - 3*d1) ## A member of the Weyl algebra: ## -276*x*d^7 +28*d^7 +5*x^2*d^2 -732*d^6 -636*x*d^4 +28*d^4 -414*d^3 ## -63*x^2*d^3 +7*d -20*x^3*d^6 -24*d^9 -70*x*d^2 -20*x^2*d^8 +77*x^3*d^3 ## +20*x^4*d^4 -21*x*d +49*d^2 -198*x^2*d^5 +28*x*d^5"},{"path":"https://robinhankin.github.io/weyl/articles/weyl.html","id":"comparison-with-mathematica","dir":"Articles","previous_headings":"The package in use","what":"Comparison with mathematica","title":"Quantum algebra with R: the weyl package","text":"Mathematica can deal operators may compare two systems’ results ∂2x∂x2\\partial^2x\\partial x^2: [1] := D[D[x*D[x^2*f[x],x],x],x] // Expand [1] := 4 f[x] + 14 x f'[x] + 8 x^2 f''[x] + x^3f'''[x] , see agreement weyl Mathematica, although terms presented different order.","code":"x <- weyl(cbind(0,1)) D <- weyl(cbind(1,0)) x^2*D*x*D^2 ## A member of the Weyl algebra: ## 4 +x^3*d^3 +8*x^2*d^2 +14*x*d"},{"path":"https://robinhankin.github.io/weyl/articles/weyl.html","id":"further-weyl-algebras","dir":"Articles","previous_headings":"","what":"Further Weyl algebras","title":"Quantum algebra with R: the weyl package","text":"package supports arbitrary multivariate Weyl algebras. Consider: , object x member operator algebra generated {∂x,∂y,∂z,x,y,z}\\left\\lbrace\\partial_x,\\partial_y,\\partial_z,x,y,z\\right\\rbrace. Object x might expressed xz2∂x∂z+3x2z∂x2∂z+2yz2∂x2∂z2xz^2\\partial_x\\partial_z + 3x^2z\\partial_x^2\\partial_z + 2yz^2\\partial_x^2\\partial_z^2 although ever rows presented implementation-dependent order. may verify associativity multiplication: Comparing two results , see apparently differ. apparent difference due fact terms appear different order, feature algebraically meaningful. may verify expressions indeed algebraically identical: package can deal arbitrarily high dimensional Weyl algebras. example: see member ninth Weyl algebra; see column headings longer use x y z notation revert numeric labels. Symbolic notation available can difficult read:","code":"options(polyform=FALSE)  # revert to default print method set.seed(0) x <- rweyl() x ## A member of the Weyl algebra: ##   x  y  z dx dy dz     val ##   2  0  1  2  0  1  =    3 ##   0  1  2  2  0  1  =    2 ##   1  0  2  1  0  1  =    1 x <- rweyl(n=1,d=2) y <- rweyl(n=2,d=2) z <- rweyl(n=3,d=2) options(polyform=TRUE) x*(y*z) ## A member of the Weyl algebra: ## +6*x*y^2*dx^2*dy +36*x*y^3*dx*dy^3 +2*x^2*y^4*dx*dy^4 ## +4*x^2*y^2*dx*dy^5 +36*x*y^2*dx*dy^2 +x*y^4*dx*dy^3 +4*x*y^3*dx*dy^2 ## +x^2*y^4*dx^2*dy^3 +12*x^2*y^2*dx*dy^2 +2*x^2*y^2*dx^2*dy^4 ## +2*x*y^2*dx*dy^4 +2*x*y^2*dx*dy +2*x^2*y^2*dx^2*dy +4*x^2*y^3*dx^2*dy^2 ## +3*x*y^4*dx^2*dy^3 +12*x^2*y^3*dx*dy^3 +6*x*y^4*dx*dy^4 ## +12*x*y^3*dx^2*dy^2 (x*y)*z ## A member of the Weyl algebra: ## +2*x*y^2*dx*dy^4 +2*x^2*y^2*dx^2*dy^4 +3*x*y^4*dx^2*dy^3 ## +x^2*y^4*dx^2*dy^3 +12*x^2*y^2*dx*dy^2 +x*y^4*dx*dy^3 ## +2*x^2*y^4*dx*dy^4 +4*x^2*y^3*dx^2*dy^2 +2*x^2*y^2*dx^2*dy ## +2*x*y^2*dx*dy +4*x*y^3*dx*dy^2 +12*x^2*y^3*dx*dy^3 +6*x*y^4*dx*dy^4 ## +12*x*y^3*dx^2*dy^2 +6*x*y^2*dx^2*dy +36*x*y^3*dx*dy^3 ## +36*x*y^2*dx*dy^2 +4*x^2*y^2*dx*dy^5 x*(y*z) - (x*y)*z ## A member of the Weyl algebra: ## the NULL multinomial of arity 4 (x9 <- rweyl(dim=9)) ## A member of the Weyl algebra: ## +3*x1*x2^2*x3^2*x4*x6*x7^2*x8^2*x9^2*d2^2*d7^2*d8*d9 ## +2*x1^2*x3*x4*x5*x6*x8*x9*d3^2*d4*d6*d7^2*d8*d9^2 ## +x3*x4^2*x5*x6*x7*x8^2*x9^2*d1^2*d3*d6^2*d8^2*d9 options(polyform=TRUE) x9 ## A member of the Weyl algebra: ## +3*x1*x2^2*x3^2*x4*x6*x7^2*x8^2*x9^2*d2^2*d7^2*d8*d9 ## +2*x1^2*x3*x4*x5*x6*x8*x9*d3^2*d4*d6*d7^2*d8*d9^2 ## +x3*x4^2*x5*x6*x7*x8^2*x9^2*d1^2*d3*d6^2*d8^2*d9 options(polyform=FALSE) # revert to default"},{"path":"https://robinhankin.github.io/weyl/articles/weyl.html","id":"derivations","dir":"Articles","previous_headings":"","what":"Derivations","title":"Quantum algebra with R: the weyl package","text":"derivation DD algebra 𝒜{\\mathcal } linear operator satisfies D(d1d2)=d1D(d2)+D(d1)d2D(d_1d_2)=d_1D(d_2) + D(d_1)d_2, every d1,d2∈𝒜d_1,d_2\\{\\mathcal }. derivation form D(d)=[d,f]=df−fdD(d) = [d,f] = df-fd fixed f∈𝒜f\\{\\mathcal }, say DD inner derivation: D(d1d2)=d1d2f−fd1d2=d1d2f−d1fd2+d1fd2−fd1d2=d1(d2f−fd2)+(d1f−fd1)d2=d1D(d2)+D(d1)d2 D(d_1d_2) = d_1d_2f-fd_1d_2 = d_1d_2f-d_1fd_2 + d_1fd_2-fd_1d_2 =  d_1(d_2f-fd_2) + (d_1f-fd_1)d_2 = d_1D(d_2) + D(d_1)d_2 Dirac showed derivations inner derivations f∈𝒜f\\{\\mathcal }. package supports derivations: ","code":"f <- rweyl() D <- as.der(f)  # D(x) = xf-fx d1 <- rweyl() d2 <- rweyl() D(d1*d2) == d1*D(d2) + D(d1)*d2 ## [1] TRUE"},{"path":"https://robinhankin.github.io/weyl/articles/weyl.html","id":"low-level-considerations-and-generalizations","dir":"Articles","previous_headings":"","what":"Low-level considerations and generalizations","title":"Quantum algebra with R: the weyl package","text":"package, product customisable. general, product *b [b weyl objects] dispatched following sequence functions: weyl_prod_multivariate_nrow_allcolumns() weyl_prod_multivariate_onerow_allcolumns() weyl_prod_multivariate_onerow_singlecolumn() weyl_prod_univariate_onerow() weyl_prod_helper3() [default] , “univariate” means “generated {x,∂x}\\left\\lbrace x,\\partial_x\\right\\rbrace” [corresponding spray object two columns]; “multivariate” means algebra generated one variable, typically something like {x,y,z,∂x,∂y,∂z}\\left\\lbrace x,y,z,\\partial_x,\\partial_y,\\partial_z\\right\\rbrace. penultimate function weyl_prod_univariate_onerow() sensitive option prodfunc specifies recurrence relation used. defaults weyl_prod_helper3(): Function weyl_prod_helper3() follows Wolf. gives univariate concatenation product (∂axb)(∂cxd)(\\partial^x^b)(\\partial^c x^d) terms standard generators: ∂axb∂cxd=∑r=0br!(br)(cr)∂+c−rxb+d−r \\partial^x^b \\partial^c x^d=\\sum_{r=0}^b r!{b\\choose r}{c\\choose r} \\partial^{+c-r}x^{b+d-r} package also includes lower-level function weyl_prod_helper1() implementing ∂axb∂cxd=∂axb−1∂cxd+1+c∂axb−1∂c−1xd\\partial^x^b \\partial^c x^d=\\partial^ax^{b-1}\\partial^cx^{d+1} + c\\partial^ax^{b-1}\\partial^{c-1}x^d (together suitable bottoming-). expected function weyl_prod_helper3() much faster weyl_prod_helper1() doesn’t seem much difference two.","code":"weyl_prod_helper3 ## function (a, b, c, d)  ## { ##     f <- function(r) { ##         factorial(r) * choose(b, r) * choose(c, r) ##     } ##     ind <- numeric(0) ##     val <- numeric(0) ##     for (r in 0:b) { ##         ind <- rbind(ind, c(a + c - r, b + d - r)) ##         val <- c(val, f(r)) ##     } ##     spray(ind, val, addrepeats = TRUE) ## } ## <bytecode: 0x55ba9c70f100> ## <environment: namespace:weyl>"},{"path":"https://robinhankin.github.io/weyl/articles/weyl.html","id":"generalized-commutator-relations","dir":"Articles","previous_headings":"","what":"Generalized commutator relations","title":"Quantum algebra with R: the weyl package","text":"can exploit package customisability considering, instead {x,∂}\\left\\lbrace x,\\partial\\right\\rbrace, algebra generated {e,∂}\\left\\lbrace e,\\partial\\right\\rbrace, ee maps ff exfe^xf: ff maps xx f(x)f(x), efef maps xx exf(x)e^xf(x). see ∂e−e∂=e\\partial e-e\\partial=e. , can prove ∂ne=e(1+∂)n\\partial^ne=e(1+\\partial)^n en∂=en∂+nene^n\\partial=e^n\\partial+ne^n , thus (ea∂b)(ec∂d)=ea+1(1+∂)bec−1∂d=ea∂b−1ec∂d+1+cea∂b−1ec∂d (e^\\partial^b)(e^c\\partial^d) =e^{+1}(1+\\partial)^^{c-1}\\partial^d =e^{}\\partial^{b-1}e^{c}\\partial^{d+1}+ce^{}\\partial^{b-1}e^{c}\\partial^d may implement set package idiom follows: , example, calculate ∂2e=e(1+2∂+∂2)\\partial^2e=e(1+2\\partial+\\partial^2): way verification: verifies indeed ∂5e=e(1+∂)5\\partial^5e=e(1+\\partial)^5. Another verification cross-check Mathematica, working ∂e∂2e\\partial e\\partial^2e: [1] := D[Exp[x]*D[D[Exp[x]*f[x],x],x],x] [1] := 2E^2x f[x] + 5E^2x f'[x] + 4E^2xf''[x] + E^2x f'''[x] can manipulate complicated expressions . Suppose want evaluate (1+e2∂)(1−5e3∂3)(1+e^2\\partial)(1-5e^3\\partial^3): course can display result symbolic form:","code":"`weyl_e_prod` <- function(a,b,c,d){     if(c==0){return(spray(cbind(a,b+d)))}     if(b==0){return(spray(cbind(a+c,d)))}     return(     Recall(a,b-1,c,d+1) +     c*Recall(a,b-1,c,d)  # cf: c*Recall(a,b-1,c-1,d)) for regular Weyl algebra     )   } options(prodfunc = weyl_e_prod)  options(weylvars = \"e\")  # changes print method d <- weyl(spray(cbind(0,1))) e <- weyl(spray(cbind(1,0))) d*d*e ## A member of the Weyl algebra: ##  e d     val ##  1 0  =    1 ##  1 1  =    2 ##  1 2  =    1 d^2*e ## A member of the Weyl algebra: ##  e d     val ##  1 0  =    1 ##  1 1  =    2 ##  1 2  =    1 d^5*e == e*(1+d)^5 ## [1] TRUE options(polyform = TRUE) d*e*d^2*e ## A member of the Weyl algebra: ## +2*e^2 +5*e^2*d +4*e^2*d^2 +e^2*d^3 o1 <- weyl(spray(cbind(2,1))) o2 <- weyl(spray(cbind(3,3))) options(polyform = FALSE) (1+o1)*(1-5*o2) ## A member of the Weyl algebra: ##  e d     val ##  5 3  =  -15 ##  3 3  =   -5 ##  5 4  =   -5 ##  2 1  =    1 ##  0 0  =    1 options(polyform = TRUE) (1+o1)*(1-5*o2) ## A member of the Weyl algebra: ## 1 -15*e^5*d^3 -5*e^3*d^3 -5*e^5*d^4 +e^2*d"},{"path":"https://robinhankin.github.io/weyl/articles/weyl.html","id":"note-on-use-of-disordr-package","dir":"Articles","previous_headings":"","what":"Note on use of disordR package","title":"Quantum algebra with R: the weyl package","text":"coefficients weyl object, rows spray matrix, stored implementation-specific order. Thus, extraction replacement use disordR package (Hankin 2022a). short example follows context weyl package; much extensive detailed discussion given disordR vignette Hankin (2022a). First create moderately complicated weyl object: coefficients W may extracted: object returned disord object. way extract (e.g.) first coefficient, order matrix rows defined. try get error: However, perfectly well defined ask “give coefficients greater 6”: Extraction works expected. Using recent improvements disordR package, take coefficients less 7 add 100 :","code":"options(weylvars = NULL)  # revert to default names (W <- weyl(spray(matrix(c(0,1,1,1,1,2,1,0),2,4),2:3))^2) ## A member of the Weyl algebra: ##   x  y dx dy     val ##   2  2  4  0  =    9 ##   2  2  3  0  =   18 ##   0  2  2  2  =    4 ##   2  2  2  0  =    9 ##   1  2  3  1  =   12 ##   1  2  2  0  =    6 ##   1  2  3  0  =    6 ##   1  2  2  1  =    6 ##   0  2  2  1  =    4 coeffs(W) ## A disord object with hash ef3b76da15a19ac6dd3ba83e2ec6b436a0f975f6 and elements ## [1]  9 18  4  9 12  6  6  6  4 ## (in some order) try(coeffs(W)[1] , silent=FALSE) ## Error in .local(x, i, j = j, ..., drop) :  ##   if using a regular index to extract, must extract each element once and once only (or none of them) o <- coeffs(W) o[o>6] ## A disord object with hash 908bdb13a2f83dd05aa5c66195a4fe0b570d42f1 and elements ## [1]  9 18  9 12 ## (in some order) coeffs(W)[coeffs(W)<7] <- coeffs(W)[coeffs(W)<7] + 100 W ##   x  y dx dy     val ##   0  2  2  1  =  104 ##   1  2  2  1  =  106 ##   1  2  3  0  =  106 ##   1  2  2  0  =  106 ##   1  2  3  1  =   12 ##   2  2  2  0  =    9 ##   0  2  2  2  =  104 ##   2  2  3  0  =   18 ##   2  2  4  0  =    9"},{"path":[]},{"path":"https://robinhankin.github.io/weyl/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robin K. S. Hankin. Author, maintainer.","code":""},{"path":"https://robinhankin.github.io/weyl/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hankin RKS (2022). “Quantum algebra R: weyl package.” doi:10.48550/ARXIV.2212.09230.","code":"@Misc{,   title = {Quantum algebra in R: the weyl package},   author = {Robin K. S. Hankin},   year = {2022},   publisher = {arXiv},   doi = {10.48550/ARXIV.2212.09230}, }"},{"path":"https://robinhankin.github.io/weyl/index.html","id":"weyl-algebra-in-r","dir":"","previous_headings":"","what":"The Weyl Algebra","title":"The Weyl Algebra","text":"cite weyl package publications please use Hankin 2022. weyl package provides R-centric functionality working Weyl algebras arbitrary dimension. detailed vignette provided package. Weyl algebra noncommutative algebra used quantum mechanics theory differential equations (Coutinho 1997). weyl package offers consistent documented suite R-centric software. based spray package sparse arrays computational efficiency. Weyl algebra arguably simplest noncommutative algebra useful quantum mechanics. isomorphic quotient ring free algebra two elements  ideal generated . weyl package implements also -th Weyl algebra. One usually writes Weyl algebra terms operators   means multiply   means differentiate respect . find . Weyl algebra also known symplectic Clifford algebra.","code":""},{"path":"https://robinhankin.github.io/weyl/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"The Weyl Algebra","text":"can install released version weyl package CRAN :","code":"# install.packages(\"weyl\")  # uncomment this to install the package library(\"weyl\") set.seed(0)"},{"path":"https://robinhankin.github.io/weyl/index.html","id":"the-weyl-package-in-use","dir":"","previous_headings":"","what":"The weyl package in use","title":"The Weyl Algebra","text":"basic creation function weyl(), takes spray object returns member Weyl algebra. , object S standard spray object work Weyl algebra need coerce weyl object weyl(): , object W member third Weyl algebra: , algebra generated . case . words . might ask  , easy package: complicated operator. However, might wish display symbolic form:","code":"S <- spray(rbind(c(1,0,0,1,1,0),c(0,1,1,3,2,0)) ,1:2) S #>                  val #>  0 1 1 3 2 0  =    2 #>  1 0 0 1 1 0  =    1 W <- weyl(S) W #> A member of the Weyl algebra: #>   x  y  z dx dy dz     val #>   0  1  1  3  2  0  =    2 #>   1  0  0  1  1  0  =    1 Wsquared <- W*W Wsquared #> A member of the Weyl algebra: #>   x  y  z dx dy dz     val #>   0  2  2  6  4  0  =    4 #>   0  1  2  6  3  0  =    8 #>   0  1  1  3  3  0  =    6 #>   1  1  1  4  3  0  =    4 #>   2  0  0  2  2  0  =    1 #>   1  0  1  4  2  0  =    2 #>   1  0  0  1  2  0  =    1 options(polyform=TRUE) Wsquared #> A member of the Weyl algebra: #> +4*y^2*z^2*dx^6*dy^4 +8*y*z^2*dx^6*dy^3 +6*y*z*dx^3*dy^3 #> +4*x*y*z*dx^4*dy^3 +x^2*dx^2*dy^2 +2*x*z*dx^4*dy^2 +x*dx*dy^2"},{"path":"https://robinhankin.github.io/weyl/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"The Weyl Algebra","text":"S. C. Coutinho 1997. many avatars simple algebra. American Mathematical Monthly, 104(7):593-604. DOI https://doi.org/10.1080/00029890.1997.11990687. Hankin 2022. Quantum algebra R: weyl package. Arxiv, DOI https://doi.org/10.48550/ARXIV.2212.09230.","code":""},{"path":"https://robinhankin.github.io/weyl/index.html","id":"further-information","dir":"","previous_headings":"","what":"Further information","title":"The Weyl Algebra","text":"detail, see package vignette vignette(\"weyl\")","code":""},{"path":"https://robinhankin.github.io/weyl/reference/Ops.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic Ops Group Methods for the Weyl algebra — Ops","title":"Arithmetic Ops Group Methods for the Weyl algebra — Ops","text":"Allows arithmetic operators addition, multiplication,   division, integer powers, etc. used weyl objects.   Idiom x^2 + y*z/5 work expected.  Addition   subtraction, scalar multiplication,   spray package; “*” interpreted   functional composition, “^” interpreted   repeated composition.  number helper functions documented   (designed end-user).","code":""},{"path":"https://robinhankin.github.io/weyl/reference/Ops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic Ops Group Methods for the Weyl algebra — Ops","text":"","code":"# S3 method for class 'weyl' Ops(e1, e2 = NULL) weyl_prod_helper1(a,b,c,d) weyl_prod_helper2(a,b,c,d) weyl_prod_helper3(a,b,c,d) weyl_prod_univariate_onerow(S1,S2,func) weyl_prod_univariate_nrow(S1,S2) weyl_prod_multivariate_onerow_singlecolumn(S1,S2,column) weyl_prod_multivariate_onerow_allcolumns(S1,S2) weyl_prod_multivariate_nrow_allcolumns(S1,S2) weyl_power_scalar(S,n)"},{"path":"https://robinhankin.github.io/weyl/reference/Ops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic Ops Group Methods for the Weyl algebra — Ops","text":"S,S1,S2,e1,e2 Objects class weyl, elements Weyl     algebra ,b,c,d Integers, see details column column multiplied n Integer power (non-negative) func Function used products","code":""},{"path":"https://robinhankin.github.io/weyl/reference/Ops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arithmetic Ops Group Methods for the Weyl algebra — Ops","text":"arithmetic spray objects, apart * ^.  , * interpreted operator concatenation: Thus, \\(w_1\\) \\(w_2\\) Weyl objects, \\(w_1w_2\\) defined operator takes \\(f\\) \\(w_1(w_2f)\\). Functions weyl_prod_multivariate_nrow_allcolumns() low-level helper functions self-explanatory names.  context, “univariate” means first Weyl algebra, generated \\(\\left\\lbrace x,\\partial\\right\\rbrace\\), subject \\(x\\partial-\\partial x=1\\); “multivariate” means algebra generated \\(\\left\\lbrace x_1,x_2,\\ldots,x_n,\\partial_{x_1},\\partial_{x_2},\\ldots,\\partial_{x_n}\\right\\rbrace\\) \\(n>1\\). product somewhat user-customisable via option prodfunc, affects function weyl_prod_univariate_onerow().  Currently package offers three examples: weyl_prod_helper1(), weyl_prod_helper2(), weyl_prod_helper3().  algebraically identical occupy different positions efficiency-readability scale.  option defaults weyl_prod_helper3(), fastest opaque.  vignette provides details, motivation, examples. Powers, x^n, defined usual way.  Negative powers always return error.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/Ops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic Ops Group Methods for the Weyl algebra — Ops","text":"Generally, return weyl object","code":""},{"path":"https://robinhankin.github.io/weyl/reference/Ops.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Arithmetic Ops Group Methods for the Weyl algebra — Ops","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/weyl/reference/Ops.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Arithmetic Ops Group Methods for the Weyl algebra — Ops","text":"Function weyl_prod_univariate_nrow() present   completeness, used package","code":""},{"path":"https://robinhankin.github.io/weyl/reference/Ops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic Ops Group Methods for the Weyl algebra — Ops","text":"","code":"x <- rweyl(n=1,d=2) y <- rweyl(n=1,d=2) z <- rweyl(n=2,d=2)   x*(y+z) == x*y + x*z #> [1] TRUE is.zero(x*(y*z) - (x*y)*z) #> [1] TRUE"},{"path":"https://robinhankin.github.io/weyl/reference/coeffs.html","id":null,"dir":"Reference","previous_headings":"","what":"Manipulate the coefficients of a weyl object — coeffs","title":"Manipulate the coefficients of a weyl object — coeffs","text":"Manipulate coefficients weyl object.  coefficients disord objects.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/coeffs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manipulate the coefficients of a weyl object — coeffs","text":"","code":"coeffs(S) <- value"},{"path":"https://robinhankin.github.io/weyl/reference/coeffs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manipulate the coefficients of a weyl object — coeffs","text":"S weyl object value Numeric","code":""},{"path":"https://robinhankin.github.io/weyl/reference/coeffs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manipulate the coefficients of a weyl object — coeffs","text":"access coefficients weyl object S, use spray::coeffs(S) [package idiom coeffs(S)].  Similarly access index matrix use index(s). replacement method package-specific; use coeffs(S) <-value.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/coeffs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manipulate the coefficients of a weyl object — coeffs","text":"Extraction methods return disord object (possibly   dropped); replacement methods return weyl object.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/coeffs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Manipulate the coefficients of a weyl object — coeffs","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/weyl/reference/coeffs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manipulate the coefficients of a weyl object — coeffs","text":"","code":"(a <- rweyl(9)) #> A member of the Weyl algebra: #>   x  y  z dx dy dz     val #>   1  2  0  0  1  1  =    9 #>   0  2  1  0  2  1  =    8 #>   0  1  0  1  1  2  =    7 #>   0  0  1  2  2  0  =    6 #>   2  2  2  1  2  1  =    5 #>   2  2  0  0  0  2  =    3 #>   1  1  1  1  0  1  =    4 #>   2  2  1  2  1  1  =    2 #>   1  1  0  1  2  2  =    1 coeffs(a) #> A disord object with hash b718add1b991c5338effd09f1b672587009a4c6b and elements #> [1] 9 8 7 6 5 3 4 2 1 #> (in some order) coeffs(a)[coeffs(a)<3] <- 100 a #>   x  y  z dx dy dz     val #>   1  1  0  1  2  2  =  100 #>   2  2  1  2  1  1  =  100 #>   1  1  1  1  0  1  =    4 #>   2  2  0  0  0  2  =    3 #>   2  2  2  1  2  1  =    5 #>   0  0  1  2  2  0  =    6 #>   0  1  0  1  1  2  =    7 #>   0  2  1  0  2  1  =    8 #>   1  2  0  0  1  1  =    9"},{"path":"https://robinhankin.github.io/weyl/reference/constant.html","id":null,"dir":"Reference","previous_headings":"","what":"The constant term — constant","title":"The constant term — constant","text":"constant weyl object coefficient term zeros.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/constant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The constant term — constant","text":"","code":"constant(x, drop = TRUE) constant(x) <- value"},{"path":"https://robinhankin.github.io/weyl/reference/constant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The constant term — constant","text":"x Object class weyl drop Boolean default TRUE meaning return     value coefficient, FALSE meaning return     corresponding Weyl object value Constant value replace existing one","code":""},{"path":"https://robinhankin.github.io/weyl/reference/constant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The constant term — constant","text":"Returns numeric weyl object","code":""},{"path":"https://robinhankin.github.io/weyl/reference/constant.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The constant term — constant","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/weyl/reference/constant.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"The constant term — constant","text":"constant.weyl() function somewhat awkward   deal difficult case constant zero   drop=FALSE.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/constant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The constant term — constant","text":"","code":"(a <- rweyl()+700) #> A member of the Weyl algebra: #>   x  y  z dx dy dz     val #>   1  2  1  2  1  2  =    3 #>   0  0  0  1  1  2  =    2 #>   2  0  1  1  1  0  =    1 #>   0  0  0  0  0  0  =  700 constant(a) #> [1] 700 constant(a,drop=FALSE) #> A member of the Weyl algebra: #>   x  y  z dx dy dz     val #>   0  0  0  0  0  0  =  700  constant(a) <- 0 constant(a) #> [1] 0 constant(a,drop=FALSE) #> A member of the Weyl algebra: #> empty sparse array with 6 columns  constant(a+66) == constant(a) + 66 #> [1] TRUE"},{"path":"https://robinhankin.github.io/weyl/reference/degree.html","id":null,"dir":"Reference","previous_headings":"","what":"The degree of a weyl object — degree","title":"The degree of a weyl object — degree","text":"degree monomial weyl object   \\(x^\\partial^b\\) defined \\(+b\\).  degree   general weyl object expressed linear combination   monomials maximum degrees monomials.  Following   Coutinho :  \\(\\mathrm{deg}(d_1+d_2)\\leq\\max(\\mathrm{deg}(d_1)+     \\mathrm{deg}(d_2))\\) \\(\\mathrm{deg}(d_1d_2) = \\mathrm{deg}(d_1)+     \\mathrm{deg}(d_2)\\) \\(\\mathrm{deg}(d_1d_2-d_2d_1)\\leq\\mathrm{deg}(d_1)+     \\mathrm{deg}(d_2)-2\\)","code":""},{"path":"https://robinhankin.github.io/weyl/reference/degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The degree of a weyl object — degree","text":"","code":"deg(S)"},{"path":"https://robinhankin.github.io/weyl/reference/degree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The degree of a weyl object — degree","text":"S Object class weyl","code":""},{"path":"https://robinhankin.github.io/weyl/reference/degree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The degree of a weyl object — degree","text":"Nonnegative integer (\\(-\\infty\\) zero Weyl   object)","code":""},{"path":"https://robinhankin.github.io/weyl/reference/degree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The degree of a weyl object — degree","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/weyl/reference/degree.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"The degree of a weyl object — degree","text":"degree zero object conventionally   \\(-\\infty\\).","code":""},{"path":"https://robinhankin.github.io/weyl/reference/degree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The degree of a weyl object — degree","text":"","code":"(a <- rweyl()) #> A member of the Weyl algebra: #>   x  y  z dx dy dz     val #>   0  0  1  2  2  2  =    3 #>   0  1  0  2  2  0  =    2 #>   0  0  0  0  0  1  =    1 deg(a) #> [1] 7  d1 <- rweyl(n=2) d2 <- rweyl(n=2)  deg(d1+d2) <= deg(d1) + deg(d2) #> [1] TRUE deg(d1*d2) == deg(d1) + deg(d2) #> [1] TRUE deg(d1*d2-d2*d1) <= deg(d1) + deg(d2) -2 #> [1] TRUE"},{"path":"https://robinhankin.github.io/weyl/reference/derivation.html","id":null,"dir":"Reference","previous_headings":"","what":"Derivations — derivation","title":"Derivations — derivation","text":"derivation \\(D\\) algebra \\(\\) linear operator satisfies \\(D(d_1d_2)=d_1D(d_2)+D(d_1)d_2\\), every \\(d_1,d_2\\\\).  derivation form \\(D(d)=[d,f]=df-fd\\) fixed \\(f\\\\), say \\(D\\) inner derivation. Function .der() returns derivation .der(f)(g)=fg-gf.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/derivation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derivations — derivation","text":"","code":"as.der(S)"},{"path":"https://robinhankin.github.io/weyl/reference/derivation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derivations — derivation","text":"S Weyl object","code":""},{"path":"https://robinhankin.github.io/weyl/reference/derivation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derivations — derivation","text":"Returns function, derivation","code":""},{"path":"https://robinhankin.github.io/weyl/reference/derivation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Derivations — derivation","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/weyl/reference/derivation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derivations — derivation","text":"","code":"(o <- rweyl(n=2,d=2)) #> A member of the Weyl algebra: #>   x  y dx dy     val #>   2  0  2  2  =    2 #>   0  2  1  2  =    1 (f <- as.der(o)) #> function (x)  #> { #>     S * x - x * S #> } #> <bytecode: 0x55e45a7ca3d8> #> <environment: 0x55e45a7cde18>  d1 <-rweyl(n=1,d=2) d2 <-rweyl(n=2,d=2)  f(d1*d2) == d1*f(d2) + f(d1)*d2 # should be TRUE #> [1] TRUE"},{"path":"https://robinhankin.github.io/weyl/reference/dim.html","id":null,"dir":"Reference","previous_headings":"","what":"The dimension of a weyl object — dim","title":"The dimension of a weyl object — dim","text":"dimension weyl algebra number variables   needed; half spray::arity().  dimension   Weyl algebra generated \\(\\left\\lbrace   x_1,x_2,\\ldots,x_n,\\partial_{x_1},\\partial_{x_2},\\ldots,\\partial_{x_n}\\right\\rbrace\\)   \\(n\\) (\\(2n\\)).","code":""},{"path":"https://robinhankin.github.io/weyl/reference/dim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The dimension of a weyl object — dim","text":"","code":"# S3 method for class 'weyl' dim(x)"},{"path":"https://robinhankin.github.io/weyl/reference/dim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The dimension of a weyl object — dim","text":"x Object class weyl","code":""},{"path":"https://robinhankin.github.io/weyl/reference/dim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The dimension of a weyl object — dim","text":"Integer","code":""},{"path":"https://robinhankin.github.io/weyl/reference/dim.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"The dimension of a weyl object — dim","text":"Empty spray objects give zero-dimensional weyl objects.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/dim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The dimension of a weyl object — dim","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/weyl/reference/dim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The dimension of a weyl object — dim","text":"","code":"(a <- rweyl()) #> A member of the Weyl algebra: #>   x  y  z dx dy dz     val #>   1  2  1  0  0  0  =    3 #>   1  0  0  0  2  2  =    2 #>   1  0  1  2  2  1  =    1 dim(a) #> [1] 3"},{"path":"https://robinhankin.github.io/weyl/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Class “dot” — dot-class","title":"Class “dot” — dot-class","text":"dot object defined idiom like .[x,y] returns   commutator, , xy-yx. dot object generated running script inst/dot.Rmd,   includes discussion technical documentation,   creates file dot.rda resides data/   directory. borcherds vignette discusses general   context.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class “dot” — dot-class","text":"x Object class ,j elements commute ... arguments dot_error(), currently ignored","code":""},{"path":"https://robinhankin.github.io/weyl/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Class “dot” — dot-class","text":"Always returns object class xy.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/dot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class “dot” — dot-class","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/weyl/reference/dot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class “dot” — dot-class","text":"","code":"x <- rweyl(n=1,d=2) y <- rweyl(n=1,d=2) z <- rweyl(n=1,d=2)  .[x,.[y,z]] + .[y,.[z,x]] + .[z,.[x,y]]  # Jacobi identity #> A member of the Weyl algebra: #> empty sparse array with 4 columns"},{"path":"https://robinhankin.github.io/weyl/reference/drop.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop redundant information — drop","title":"Drop redundant information — drop","text":"Coerce constant weyl objects numeric","code":""},{"path":"https://robinhankin.github.io/weyl/reference/drop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop redundant information — drop","text":"","code":"drop(x)"},{"path":"https://robinhankin.github.io/weyl/reference/drop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop redundant information — drop","text":"x Weyl object","code":""},{"path":"https://robinhankin.github.io/weyl/reference/drop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drop redundant information — drop","text":"argument constant weyl object, coerce numeric.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/drop.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Drop redundant information — drop","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/weyl/reference/drop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop redundant information — drop","text":"Returns either length-one numeric vector argument,   weyl object","code":""},{"path":"https://robinhankin.github.io/weyl/reference/drop.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Drop redundant information — drop","text":"Many functions package take drop argument   , TRUE, means function returns   dropped value.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/drop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop redundant information — drop","text":"","code":"a <- rweyl() + 67 drop(a) #> A member of the Weyl algebra: #>   x  y  z dx dy dz     val #>   2  2  2  2  0  1  =    3 #>   0  2  2  1  1  1  =    2 #>   0  2  1  2  1  0  =    1 #>   0  0  0  0  0  0  =   67  drop(idweyl(9)) #> [1] 1  drop(constant(a,drop=FALSE)) #> [1] 67"},{"path":"https://robinhankin.github.io/weyl/reference/grade.html","id":null,"dir":"Reference","previous_headings":"","what":"The grade of a weyl object — grade","title":"The grade of a weyl object — grade","text":"grade homogeneous term Weyl algebra sum   powers.  Thus grade   \\(4xy^2\\partial_x^3\\partial_y^4\\) \\(1+2+3+4=10\\). functionality documented closely follows equivalent   clifford package. Coutinho calls symbol map.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/grade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The grade of a weyl object — grade","text":"","code":"grade(C, n, drop=TRUE) grade(C, n) <- value grades(x)"},{"path":"https://robinhankin.github.io/weyl/reference/grade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The grade of a weyl object — grade","text":"C,x Weyl object n Integer vector specifying grades extract value Replacement value, numeric vector drop Boolean, default TRUE meaning coerce     constant operator numeric, FALSE meaning     ","code":""},{"path":"https://robinhankin.github.io/weyl/reference/grade.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The grade of a weyl object — grade","text":"Function grades() returns (unordered) vector specifying grades constituent terms.  Function grades<-() allows idiom grade(x,1:2) <- 7 operate expected [set coefficients terms grades 1 2 value 7]. Function grade(C,n) returns Weyl object just elements grade g, g %% n. zero grade term, grade(C,0), given naturally constant(C).","code":""},{"path":"https://robinhankin.github.io/weyl/reference/grade.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The grade of a weyl object — grade","text":"Integer vector weyl object","code":""},{"path":"https://robinhankin.github.io/weyl/reference/grade.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The grade of a weyl object — grade","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/weyl/reference/grade.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The grade of a weyl object — grade","text":"","code":"a <- rweyl(30)  grades(a) #> A disord object with hash d3e95ebc6f51951331de5094fe478d929ba9bdcd and elements #>  [1] 5 8 7 5 4 4 6 6 8 8 4 6 5 3 6 4 6 8 7 5 7 5 8 8 7 7 4 6 6 5 #> (in some order) grade(a,1:4) #> A member of the Weyl algebra: #>   x  y  z dx dy dz     val #>   1  0  2  0  0  1  =   25 #>   1  0  0  0  1  1  =   24 #>   2  0  0  1  1  0  =    6 #>   2  1  1  0  0  0  =    7 #>   1  0  0  0  2  1  =   22 #>   0  1  1  1  1  0  =   11 grade(a,5:9) <- -99 a #> A member of the Weyl algebra: #>   x  y  z dx dy dz     val #>   1  0  1  1  2  1  =  -99 #>   2  1  1  2  1  1  =  -99 #>   2  1  1  0  0  0  =    7 #>   0  1  2  2  1  2  =  -99 #>   2  2  0  1  0  0  =  -99 #>   1  0  0  0  1  1  =   24 #>   2  0  0  2  0  1  =  -99 #>   2  0  2  0  1  2  =  -99 #>   1  2  2  1  2  0  =  -99 #>   1  0  0  0  2  1  =   22 #>   1  1  1  0  2  1  =  -99 #>   1  2  1  1  1  0  =  -99 #>   0  1  1  1  1  0  =   11 #>   0  2  0  1  0  2  =  -99 #>   0  1  2  2  1  0  =  -99 #>   2  0  0  1  1  0  =    6 #>   2  2  0  1  1  0  =  -99 #>   2  2  1  1  1  1  =  -99 #>   0  2  1  2  2  0  =  -99 #>   0  0  2  2  1  0  =  -99 #>   0  2  1  1  1  2  =  -99 #>   1  1  0  2  1  0  =  -99 #>   2  2  2  0  2  0  =  -99 #>   1  1  1  0  1  1  =  -99 #>   2  0  0  2  2  0  =  -99 #>   0  1  1  1  2  1  =  -99 #>   2  2  2  0  0  2  =  -99 #>   1  0  1  2  1  2  =  -99 #>   1  2  0  2  1  1  =  -99 #>   1  0  2  0  0  1  =   25"},{"path":"https://robinhankin.github.io/weyl/reference/horner.html","id":null,"dir":"Reference","previous_headings":"","what":"Horner's method — horner","title":"Horner's method — horner","text":"Horner's method","code":""},{"path":"https://robinhankin.github.io/weyl/reference/horner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Horner's method — horner","text":"","code":"horner(W,v)"},{"path":"https://robinhankin.github.io/weyl/reference/horner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Horner's method — horner","text":"W Weyl object v Numeric vector coefficients","code":""},{"path":"https://robinhankin.github.io/weyl/reference/horner.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Horner's method — horner","text":"Given formal polynomial $$p(x) = a_0 +a_1+a_2x^2+\\cdots + a_nx^n$$ possible express \\(p(x)\\) algebraically equivalent   form $$p(x) = a_0 + x\\left(a_1+x\\left(a_2+\\cdots + x\\left(a_{n-1} +xa_n \\right)\\cdots\\right)\\right)$$ much efficient evaluation, requires \\(n\\) multiplications \\(n\\) additions, optimal.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/horner.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Horner's method — horner","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/weyl/reference/horner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Horner's method — horner","text":"","code":"horner(x,1:5) #> A member of the Weyl algebra: #>  x d     val #>  4 0  =    5 #>  3 0  =    4 #>  2 0  =    3 #>  0 0  =    1 #>  1 0  =    2 horner(x+d,1:3) #> A member of the Weyl algebra: #>  x d     val #>  2 0  =    3 #>  0 0  =    4 #>  0 1  =    2 #>  1 1  =    6 #>  0 2  =    3 #>  1 0  =    2  2+x+d |> horner(1:3) |> horner(1:2) #> A member of the Weyl algebra: #>  x d     val #>  1 0  =    1 #>  0 0  =    5 #>  0 1  =    4 #>  0 2  =    6"},{"path":"https://robinhankin.github.io/weyl/reference/identity.html","id":null,"dir":"Reference","previous_headings":"","what":"The identity operator — identity","title":"The identity operator — identity","text":"identity operator maps function .","code":""},{"path":"https://robinhankin.github.io/weyl/reference/identity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The identity operator — identity","text":"","code":"idweyl(d) # S3 method for class 'weyl' as.id(S) is.id(S)"},{"path":"https://robinhankin.github.io/weyl/reference/identity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The identity operator — identity","text":"d Integer specifying dimensionality weyl object (twice     spray arity) S weyl object","code":""},{"path":"https://robinhankin.github.io/weyl/reference/identity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The identity operator — identity","text":"weyl object corresponding identity operator","code":""},{"path":"https://robinhankin.github.io/weyl/reference/identity.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"The identity operator — identity","text":"identity function called “id()”   R know whether create   spray weyl object.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/identity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The identity operator — identity","text":"","code":"idweyl(7) #> A member of the Weyl algebra: #>   1  2  3  4  5  6  7 d1 d2 d3 d4 d5 d6 d7     val #>   0  0  0  0  0  0  0  0  0  0  0  0  0  0  =    1  a <- rweyl(d=5) a #> A member of the Weyl algebra: #>   1  2  3  4  5 d1 d2 d3 d4 d5     val #>   0  2  1  0  0  1  0  1  1  2  =    3 #>   1  1  1  2  0  1  1  0  2  0  =    2 #>   2  2  2  2  0  2  2  0  0  0  =    1 is.id(a) #> [1] FALSE is.id(1+a-a) #> [1] TRUE as.id(a) #> A member of the Weyl algebra: #>   1  2  3  4  5 d1 d2 d3 d4 d5     val #>   0  0  0  0  0  0  0  0  0  0  =    1  a == a*1 #> [1] TRUE a == a*as.id(a) #> [1] TRUE"},{"path":"https://robinhankin.github.io/weyl/reference/ooom.html","id":null,"dir":"Reference","previous_headings":"","what":"One over one minus — ooom","title":"One over one minus — ooom","text":"Uses Taylor's theorem give one one minus Weyl object","code":""},{"path":"https://robinhankin.github.io/weyl/reference/ooom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One over one minus — ooom","text":"","code":"ooom(W,n)"},{"path":"https://robinhankin.github.io/weyl/reference/ooom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One over one minus — ooom","text":"W Weyl object n Order expansion","code":""},{"path":"https://robinhankin.github.io/weyl/reference/ooom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"One over one minus — ooom","text":"Robin K. S. Hankin","code":""},{"path":[]},{"path":"https://robinhankin.github.io/weyl/reference/ooom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One over one minus — ooom","text":"","code":"ooom(x+d,4) #> A member of the Weyl algebra: #>  x d     val #>  2 1  =    3 #>  2 2  =    6 #>  0 4  =    1 #>  1 1  =   14 #>  4 0  =    1 #>  3 0  =    1 #>  0 3  =    1 #>  1 0  =    4 #>  1 3  =    4 #>  3 1  =    4 #>  1 2  =    3 #>  0 0  =    5 #>  0 1  =    4 #>  2 0  =    7 #>  0 2  =    7  W <- x+x*d ooom(W,4)*(1-W) == 1-W^5 #> [1] TRUE"},{"path":"https://robinhankin.github.io/weyl/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print methods for weyl objects — print.weyl","title":"Print methods for weyl objects — print.weyl","text":"Printing methods weyl objects follow spray package, additional functionality.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print methods for weyl objects — print.weyl","text":"","code":"# S3 method for class 'weyl' print(x, ...)"},{"path":"https://robinhankin.github.io/weyl/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print methods for weyl objects — print.weyl","text":"x weyl object ... arguments, currently ignored","code":""},{"path":"https://robinhankin.github.io/weyl/reference/print.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print methods for weyl objects — print.weyl","text":"Option polyform determines whether object printed matrix form polynomial form: spray package, option governs dispatch either print_spray_polyform() print_spray_matrixform(). Irrespective value polyform, option weylvars controls variable names.  NULL (default), sensible values used: either [xyz] dimension three less, integers.  option weylvars user-settable: user sets weylvars, print method tries Right Thing (tm).  set c(\"\",\"b\",\"c\"), example, generators named c(\" \",\" b\",\" c\",\"da\",\"db\",\"dc\") [note spaces].  algebra univariate, names something like d x.  checking performed length equal dimension, undesirable behaviour may occur.  love God, use variable named d.  Internally, weylvars works changing sprayvars option spray package. Note , spray objects, option algebraic significance: affects print method.","code":"> a <- rweyl() > a    # default print method A member of the Weyl algebra:   x  y  z dx dy dz     val   1  2  2  2  1  0  =    3   2  2  0  0  1  1  =    2   0  0  0  1  1  2  =    1 > options(polyform = TRUE) > a A member of the Weyl algebra: +3*x*y^2*z^2*dx^2*dy +2*x^2*y^2*dy*dz +dx*dy*dz^2 > options(polyform = FALSE)  # restore default > options(weylvars=letters[18:20]) > a A member of the Weyl algebra:   r  s  t dr ds dt     val   1  2  2  2  1  0  =    3   2  2  0  0  1  1  =    2   0  0  0  1  1  2  =    1 > options(polyform=TRUE) > a A member of the Weyl algebra: +3*r*s^2*t^2*dr^2*ds +2*r^2*s^2*ds*dt +dr*ds*dt^2 > options(polyform=FALSE) ; options(weylvars=NULL)"},{"path":"https://robinhankin.github.io/weyl/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print methods for weyl objects — print.weyl","text":"Returns weyl object.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/print.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print methods for weyl objects — print.weyl","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/weyl/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print methods for weyl objects — print.weyl","text":"","code":"a <- rweyl() print(a) #> A member of the Weyl algebra: #>   x  y  z dx dy dz     val #>   0  1  0  0  1  1  =    3 #>   2  1  2  0  0  1  =    2 #>   2  2  1  0  0  2  =    1 options(polyform=TRUE) print(a) #> A member of the Weyl algebra: #> +3*y*dy*dz +2*x^2*y*z^2*dz +x^2*y^2*z*dz^2"},{"path":"https://robinhankin.github.io/weyl/reference/rweyl.html","id":null,"dir":"Reference","previous_headings":"","what":"Random weyl objects — rweyl","title":"Random weyl objects — rweyl","text":"Creates random weyl objects: quick--dirty examples Weyl algebra elements","code":""},{"path":"https://robinhankin.github.io/weyl/reference/rweyl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random weyl objects — rweyl","text":"","code":"rweyl(nterms = 3, vals = seq_len(nterms), dim = 3, powers = 0:2) rweyll(nterms = 15, vals = seq_len(nterms), dim = 4, powers = 0:5) rweylll(nterms = 50, vals = seq_len(nterms), dim = 8, powers = 0:7)"},{"path":"https://robinhankin.github.io/weyl/reference/rweyl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random weyl objects — rweyl","text":"nterms Number terms output vals Values coefficients dim Dimension weyl object powers Set sample entries index matrix","code":""},{"path":"https://robinhankin.github.io/weyl/reference/rweyl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random weyl objects — rweyl","text":"Function rweyl() creates smallish random Weyl object; rweyll() rweylll() create successively complicated objects. functions use spray::rspray(), note repeated rows index matrix resulting fewer nterms terms applies. Function rweyl1() returns one-dimensional Weyl object.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/rweyl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random weyl objects — rweyl","text":"Returns weyl object","code":""},{"path":"https://robinhankin.github.io/weyl/reference/rweyl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random weyl objects — rweyl","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/weyl/reference/rweyl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random weyl objects — rweyl","text":"","code":"rweyl() #> A member of the Weyl algebra: #> +3*x^2*dy +2*x^2*z^2*dy +x*y^2*dx*dy*dz^2 rweyll() #> A member of the Weyl algebra: #> +15*x2^4*x3*x4^4*d2^2 +x1^5*x2^2*x4*d1^4*d2^3*d3^3 #> +3*x1*x2^5*x3^2*x4^2*d1^4*d2^3*d3^2*d4^2 +6*x2^4*x4*d1^3*d4^2 #> +4*x2*x3*x4^3*d1^4*d2^3*d3^3*d4^4 #> +8*x1^5*x2*x3^5*x4^3*d1^5*d2^4*d3^5*d4 #> +14*x2^4*x3^3*x4^5*d1^2*d2^4*d4^2 +5*x1^5*x2*x4*d1^3*d2^5*d4^2 #> +10*x3*d1^3*d2*d3^4*d4^4 +9*x1^5*x2*x3^4*x4^3*d1^4*d2*d3*d4^3 #> +11*x1^2*x2^3*x3^3*x4*d1^5*d2^2*d3^2*d4^4 #> +7*x1^3*x2^4*x3^4*x4^2*d1^3*d2^3*d3^4*d4^5 #> +2*x1^4*x3*x4*d1^5*d2*d3^5*d4 +12*x1^2*x3*x4^3*d1^5*d2^4*d3^4*d4^4 #> +13*x1^2*x2^2*x3^4*x4^4*d1^2*d2*d3*d4^4 rweyl(d=7) #> A member of the Weyl algebra: #> +3*x1*x2^2*x7*d2^2*d3^2*d4^2*d5*d6*d7^2 #> +2*x1*x3^2*x5^2*d1*d2^2*d3^2*d4^2*d5^2*d6^2 #> +x1*x2*x3*x4^2*x5^2*x6^2*x7*d1*d2^2*d4*d5^2*d6^2*d7  options(polyform = TRUE) rweyl1() #> A member of the Weyl algebra: #> +5*x^3*d +4*x^3*d^2 +2*x^3*d^3 +6*x^2*d +3*x*d +x^4*d^4 options(polyform = FALSE) # restore default"},{"path":"https://robinhankin.github.io/weyl/reference/spray.html","id":null,"dir":"Reference","previous_headings":"","what":"Create spray objects — spray","title":"Create spray objects — spray","text":"Function spray() creates sparse array; function   weyl() coerces spray object  Weyl object.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/spray.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create spray objects — spray","text":"","code":"spray(M,x,addrepeats=FALSE)"},{"path":"https://robinhankin.github.io/weyl/reference/spray.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create spray objects — spray","text":"M integer-valued matrix, index weyl object x Numeric vector coefficients addrepeats Boolean, specifying whether repeated rows added","code":""},{"path":"https://robinhankin.github.io/weyl/reference/spray.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create spray objects — spray","text":"function discussed motivated spray package.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/spray.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create spray objects — spray","text":"Return weyl Boolean","code":""},{"path":"https://robinhankin.github.io/weyl/reference/spray.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create spray objects — spray","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/weyl/reference/spray.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create spray objects — spray","text":"","code":"(W <- spray(matrix(1:36,6,6),1:6)) #>  x  d NA NA NA NA     val #>  6 12 18 24 30 36  =    6 #>  3  9 15 21 27 33  =    3 #>  5 11 17 23 29 35  =    5 #>  4 10 16 22 28 34  =    4 #>  2  8 14 20 26 32  =    2 #>  1  7 13 19 25 31  =    1 weyl(W) #> A member of the Weyl algebra: #>   x  y  z dx dy dz     val #>   6 12 18 24 30 36  =    6 #>   3  9 15 21 27 33  =    3 #>   5 11 17 23 29 35  =    5 #>   4 10 16 22 28 34  =    4 #>   2  8 14 20 26 32  =    2 #>   1  7 13 19 25 31  =    1  as.weyl(15,d=3) #> A member of the Weyl algebra: #>   x  y  z dx dy dz     val #>   0  0  0  0  0  0  =   15"},{"path":"https://robinhankin.github.io/weyl/reference/weyl-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class “weyl” — weyl-class","title":"Class “weyl” — weyl-class","text":"formal S4 class weyls.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/weyl-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class “weyl” — weyl-class","text":"Objects can created calls form new(\"weyl\",   ...) encouraged.  Use functions weyl()  .weyl() instead.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/weyl-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class “weyl” — weyl-class","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/weyl/reference/weyl-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The Weyl Algebra — weyl-package","title":"The Weyl Algebra — weyl-package","text":"suite routines Weyl algebras.  Notation follows    Coutinho (1995, ISBN 0-521-55119-6, \"Primer Algebraic    D-Modules\").  Uses 'disordR' discipline    (Hankin 2022 <doi:10.48550/arXiv.2210.03856>).  cite    package publications, use Hankin    2022 <doi:10.48550/arXiv.2212.09230>.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/weyl-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Weyl Algebra — weyl-package","text":"DESCRIPTION file: package yet installed build time.   Index:  package yet installed build time.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/weyl-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Weyl Algebra — weyl-package","text":"Robin K. S. Hankin [aut, cre] (<https://orcid.org/0000-0001-5982-0415>) Maintainer: Robin K. S. Hankin <hankin.robin@gmail.com>","code":""},{"path":"https://robinhankin.github.io/weyl/reference/weyl-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Weyl Algebra — weyl-package","text":"","code":"x <- rweyl(d=1) y <- rweyl(d=1) z <- rweyl(d=1)  is.zero(x*(y*z) - (x*y)*z)  # should be TRUE #> [1] TRUE"},{"path":"https://robinhankin.github.io/weyl/reference/weyl.html","id":null,"dir":"Reference","previous_headings":"","what":"The algebra and weyl objects — weyl","title":"The algebra and weyl objects — weyl","text":"Basic functions weyl objects","code":""},{"path":"https://robinhankin.github.io/weyl/reference/weyl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The algebra and weyl objects — weyl","text":"","code":"weyl(M) is.weyl(M) as.weyl(val,d) is.ok.weyl(M)"},{"path":"https://robinhankin.github.io/weyl/reference/weyl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The algebra and weyl objects — weyl","text":"M weyl spray object val,d Value dimension weyl object","code":""},{"path":"https://robinhankin.github.io/weyl/reference/weyl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The algebra and weyl objects — weyl","text":"create weyl object, pass spray function weyl(),   weyl(M).  create spray object pass weyl(),   use function spray(), synonym   spray::spray(). Function weyl() formal creator method; .weyl() tests weyl objects .ok.weyl() checks well-formed sprays.  Function .weyl() tries (hard) infer user intended return right thing.","code":""},{"path":"https://robinhankin.github.io/weyl/reference/weyl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The algebra and weyl objects — weyl","text":"Return weyl Boolean","code":""},{"path":"https://robinhankin.github.io/weyl/reference/weyl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The algebra and weyl objects — weyl","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/weyl/reference/weyl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The algebra and weyl objects — weyl","text":"","code":"(W <- spray(matrix(1:36,6,6),1:6)) #>   x  y  z dx dy dz     val #>   6 12 18 24 30 36  =    6 #>   3  9 15 21 27 33  =    3 #>   5 11 17 23 29 35  =    5 #>   4 10 16 22 28 34  =    4 #>   2  8 14 20 26 32  =    2 #>   1  7 13 19 25 31  =    1 weyl(W) #> A member of the Weyl algebra: #>   x  y  z dx dy dz     val #>   6 12 18 24 30 36  =    6 #>   3  9 15 21 27 33  =    3 #>   5 11 17 23 29 35  =    5 #>   4 10 16 22 28 34  =    4 #>   2  8 14 20 26 32  =    2 #>   1  7 13 19 25 31  =    1  as.weyl(15,d=3) #> A member of the Weyl algebra: #>   x  y  z dx dy dz     val #>   0  0  0  0  0  0  =   15  is.ok.weyl(spray(matrix(1:30,5,6))) #> [1] TRUE is.ok.weyl(spray(matrix(1:30,6,5))) #> [1] \"arity must be even\""},{"path":"https://robinhankin.github.io/weyl/reference/x_and_d.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating elements for the first Weyl algebra — x_and_d","title":"Generating elements for the first Weyl algebra — x_and_d","text":"Variables x d correspond operator \\(x\\)   \\(\\partial_x\\); provided convenience.    elements generate one-dimensional Weyl algebra. Note similar system multivariate Weyl algebras   desirable.  might want consider Weyl algebra generated   \\(\\left\\lbrace   x,y,z,\\partial_x,\\partial_y,\\partial_z\\right\\rbrace\\)   correspondingly define R variables x,y,z,dx,dy,dz.    variable x ambiguous: member first Weyl   algebra third?","code":""},{"path":"https://robinhankin.github.io/weyl/reference/x_and_d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating elements for the first Weyl algebra — x_and_d","text":"","code":"data(x_and_d)"},{"path":"https://robinhankin.github.io/weyl/reference/x_and_d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generating elements for the first Weyl algebra — x_and_d","text":"Robin K. S. Hankin","code":""},{"path":"https://robinhankin.github.io/weyl/reference/x_and_d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating elements for the first Weyl algebra — x_and_d","text":"","code":"d #> A member of the Weyl algebra: #>  x d     val #>  0 1  =    1 x #> A member of the Weyl algebra: #>  x d     val #>  1 0  =    1  .[d,x]   # dx-xd==1 #> [1] 1  d^3 * x^4 #> A member of the Weyl algebra: #>  x d     val #>  4 3  =    1 #>  3 2  =   12 #>  2 1  =   36 #>  1 0  =   24  (1-d*x*d)*(x^2-d^3) #> A member of the Weyl algebra: #>  x d     val #>  2 1  =   -5 #>  1 0  =   -4 #>  0 3  =   -1 #>  0 4  =    1 #>  2 0  =    1 #>  3 2  =   -1 #>  1 5  =    1"},{"path":"https://robinhankin.github.io/weyl/reference/zero.html","id":null,"dir":"Reference","previous_headings":"","what":"The zero operator — zero","title":"The zero operator — zero","text":"zero operator maps function zero function (maps anything zero).  test zero, use spray::.zero(); package idiom .zero().","code":""},{"path":"https://robinhankin.github.io/weyl/reference/zero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The zero operator — zero","text":"","code":"zero(d)"},{"path":"https://robinhankin.github.io/weyl/reference/zero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The zero operator — zero","text":"d Integer specifying dimensionality weyl object (twice     spray arity)","code":""},{"path":"https://robinhankin.github.io/weyl/reference/zero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The zero operator — zero","text":"weyl object corresponding zero operator (Boolean   .zero())","code":""},{"path":"https://robinhankin.github.io/weyl/reference/zero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The zero operator — zero","text":"","code":"(a <- rweyl(d=5)) #> A member of the Weyl algebra: #>   1  2  3  4  5 d1 d2 d3 d4 d5     val #>   0  1  1  1  2  1  0  1  1  1  =    3 #>   1  2  2  0  1  0  1  0  0  0  =    2 #>   1  2  2  1  2  2  1  2  2  1  =    1 is.zero(a) #> [1] FALSE is.zero(a-a) #> [1] TRUE is.zero(a*0) #> [1] TRUE  a == a + zero(dim(a)) #> [1] TRUE"},{"path":"https://robinhankin.github.io/weyl/news/index.html","id":"weyl-00-6","dir":"Changelog","previous_headings":"","what":"weyl 0.0-6","title":"weyl 0.0-6","text":"rweyll() rweylll() github workflow pkgdown code conduct Fix intermittend testing problem weyl 0.0-5 bugfixes new extraction methods coverage","code":""},{"path":"https://robinhankin.github.io/weyl/news/index.html","id":"weyl-00-4","dir":"Changelog","previous_headings":"","what":"weyl 0.0-4","title":"weyl 0.0-4","text":"CRAN release: 2023-09-29 github workflows remove mathjax dependencies new vignette","code":""},{"path":"https://robinhankin.github.io/weyl/news/index.html","id":"weyl-00-1","dir":"Changelog","previous_headings":"","what":"weyl 0.0-1","title":"weyl 0.0-1","text":"CRAN release: 2022-01-21 initial release","code":""}]
